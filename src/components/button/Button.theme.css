@import '../../system/css/rules/color.module.css';
@import '../../system/css/rules/typography.module.css';

:root {
	--button-primary-background: var(--color-primary-action);
	--button-primary-foreground: white;
	--button-primary-inverted-background: var(--button-primary-foreground);
	--button-primary-inverted-foreground: var(--button-primary-background);

	--button-secondary-background: var(--color-secondary-action);
	--button-secondary-foreground: var(--color-foreground);
	--button-secondary-inverted-background: white;
	--button-secondary-inverted-foreground: var(--button-secondary-foreground);

	--button-destructive-background: var(--color-destructive-action);
	--button-destructive-foreground: white;
	--button-destructive-inverted-background: var(
		--button-destructive-foreground
	);
	--button-destructive-inverted-foreground: var(
		--button-destructive-background
	);

	--button-constructive-background: var(--color-constructive-action);
	--button-constructive-foreground: white;
	--button-constructive-inverted-background: var(
		--button-constructive-foreground
	);
	--button-constructive-inverted-foreground: var(
		--button-constructive-background
	);
}

.link:where(button),
.plain:where(button) {
	appearance: none;
	background: none;
	outline: none;
	border: none;
	padding: unset;
	color: inherit;
}

.link,
.plain {
	cursor: pointer;
	display: inline-block;
	position: relative;
	text-decoration: none;

	&:focus::before {
		content: '';
		display: block;
		position: absolute;
		inset: -2px;
		border-radius: inherit;
		border: 3px solid var(--color-focused-outline);
	}
}

.link {
	color: var(--color-link);

	@media (hover: hover) {
		&:hover {
			text-decoration: underline;
		}
	}
}

.button {
	/* this has to have a unit now to apply min-height as well */
	--button-line-height: 1rem;

	appearance: none;
	text-decoration: none;
	display: inline-block;
	position: relative;
	line-height: var(--button-line-height);
	font-family: var(--body-font-family);
	cursor: pointer;

	/* FIXME: border needs to be set with border rules instead */
	border: none;

	& div[data-button-label] {
		/* Knock out the descender space on icons & text boxes below this element */
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		min-height: var(--button-line-height);

		& > * {
			display: block;
		}
	}

	& :global(.nt-icon) {
		font-size: var(--icon-size);
	}

	& :global(.nt-icon):first-child:not(:only-child) {
		margin-right: 0.5em;
	}

	& :global(.nt-icon):last-child:not(:only-child) {
		margin-left: 0.5rem;
	}

	&:focus::before {
		content: '';
		display: block;
		position: absolute;
		inset: -2px;
		border-radius: inherit;
		border: 3px solid var(--color-focused-outline);
	}
}

@media (hover: hover) {
	.button:hover::after {
		content: '';
		display: block;
		position: absolute;
		inset: 0;
		border-radius: inherit;
		background: currentColor;
		opacity: 10%;
	}
}

.button:disabled {
	opacity: 70%;
	pointer-events: none;
}

.only-icon {
	width: var(--target-button-height);
	height: var(--target-button-height);

	& :global(.nt-icon) {
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}

	&.inverted,
	&.transparent {
		&:focus::after {
			content: '';
			display: block;
			position: absolute;
			inset: 0;
			background: currentColor;
			opacity: 10%;
		}
	}
}

.medium {
	font-size: var(--font-size-200);
	font-weight: 600;

	--button-line-height: 1rem;
	--icon-size: 1rem;
	--target-button-height: 40px;
}

.large {
	font-size: var(--font-size-200);
	font-weight: 600;

	--button-line-height: 1.125rem;
	--icon-size: 1rem;
	--target-button-height: 42px;
}

.xlarge {
	font-size: var(--font-size-600);
	font-weight: 300;

	--button-line-height: 1.3;
	--icon-size: 1rem;
	--target-button-height: 47px;
}

.header {
	font-size: var(--font-size-800);
	font-weight: 300;

	--button-line-height: 1.3;
	--icon-size: 1rem;
	--target-button-height: 52px;
}

.primary {
	background: var(--button-primary-background);
	color: var(--button-primary-foreground);

	&.transparent {
		color: var(--button-primary-inverted-foreground);
		background: none;
	}

	&.inverted {
		background: var(--button-primary-inverted-background);
		color: var(--button-primary-inverted-foreground);
		box-shadow: 0 0 0 1px var(--color-outline-light);
	}
}

.secondary {
	background: var(--button-secondary-background);
	color: var(--button-secondary-foreground);

	&.transparent {
		color: var(--button-secondary-inverted-foreground);
		background: none;
	}

	&.inverted {
		background: var(--button-secondary-inverted-background);
		color: var(--button-secondary-inverted-foreground);
		box-shadow: 0 0 0 1px var(--color-outline-light);
	}
}

.destructive {
	background: var(--button-destructive-background);
	color: var(--button-destructive-foreground);

	&.transparent {
		color: var(--button-destructive-inverted-foreground);
		background: none;
	}

	&.inverted {
		background: var(--button-destructive-inverted-background);
		color: var(--button-destructive-inverted-foreground);
		box-shadow: 0 0 0 1px var(--color-outline-light);
	}
}

.constructive {
	background: var(--button-constructive-background);
	color: var(--button-constructive-foreground);

	&.transparent {
		color: var(--button-constructive-inverted-foreground);
		background: none;
	}

	&.inverted {
		background: var(--button-constructive-inverted-background);
		color: var(--button-constructive-inverted-foreground);
		box-shadow: 0 0 0 1px var(--color-outline-light);
	}
}
